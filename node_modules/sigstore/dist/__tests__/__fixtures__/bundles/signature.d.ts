/// <reference types="node" />
declare const _default: {
    publicKey: string;
    artifact: Buffer;
    valid: {
        withSigningCert: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    inclusionProof: undefined;
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
                publicKey: undefined;
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
            dsseEnvelope: undefined;
        };
        withPublicKey: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                publicKey: {
                    hint: string;
                };
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
        };
    };
    invalid: {
        expiredCert: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    canonicalizedBody: string;
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    inclusionProof: undefined;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
                publicKey: undefined;
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
            dsseEnvelope: undefined;
        };
        setMismatch: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    inclusionProof: undefined;
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
                publicKey: undefined;
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
            dsseEnvelope: undefined;
        };
        setMissing: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {};
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
        };
        tlogVersionMismatch: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
        };
        tlogIncorrectSigInBody: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            messageSignature: {
                messageDigest: {
                    algorithm: string;
                    digest: string;
                };
                signature: string;
            };
        };
    };
};
export default _default;
