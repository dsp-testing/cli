declare const _default: {
    publicKey: string;
    valid: {
        withSigningCert: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        withPublicKey: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                publicKey: {
                    hint: string;
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
    };
    invalid: {
        badSignature: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        noSignature: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: never[];
            };
        };
        tlogSETMismatch: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogKindVersionMissing: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogLogIDMissing: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    integratedTime: string;
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogVersionMismatch: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogIncorrectSigInBody: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogTooManySigsInBody: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
        tlogUnsupportedVersion: {
            mediaType: string;
            verificationData: {
                tlogEntries: {
                    logIndex: string;
                    logId: {
                        keyId: string;
                    };
                    kindVersion: {
                        kind: string;
                        version: string;
                    };
                    integratedTime: string;
                    inclusionPromise: {
                        signedEntryTimestamp: string;
                    };
                    canonicalizedBody: string;
                }[];
                timestampVerificationData: {
                    rfc3161Timestamps: never[];
                };
            };
            verificationMaterial: {
                x509CertificateChain: {
                    certificates: {
                        rawBytes: string;
                    }[];
                };
            };
            dsseEnvelope: {
                payload: string;
                payloadType: string;
                signatures: {
                    sig: string;
                    keyid: string;
                }[];
            };
        };
    };
};
export default _default;
