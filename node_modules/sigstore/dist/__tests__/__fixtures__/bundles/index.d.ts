/// <reference types="node" />
/// <reference types="node" />
import crypto from 'crypto';
declare const _default: {
    dsse: {
        publicKey: string;
        valid: {
            withSigningCert: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            withPublicKey: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    publicKey: {
                        hint: string;
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
        };
        invalid: {
            badSignature: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            noSignature: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: never[];
                };
            };
            tlogSETMismatch: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogKindVersionMissing: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogLogIDMissing: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        integratedTime: string;
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogVersionMismatch: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogIncorrectSigInBody: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogTooManySigsInBody: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
            tlogUnsupportedVersion: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                dsseEnvelope: {
                    payload: string;
                    payloadType: string;
                    signatures: {
                        sig: string;
                        keyid: string;
                    }[];
                };
            };
        };
    };
    signature: {
        publicKey: string;
        artifact: Buffer;
        valid: {
            withSigningCert: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        inclusionProof: undefined;
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                    publicKey: undefined;
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
                dsseEnvelope: undefined;
            };
            withPublicKey: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    publicKey: {
                        hint: string;
                    };
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
            };
        };
        invalid: {
            expiredCert: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        canonicalizedBody: string;
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        inclusionProof: undefined;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                    publicKey: undefined;
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
                dsseEnvelope: undefined;
            };
            setMismatch: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        inclusionProof: undefined;
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                    publicKey: undefined;
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
                dsseEnvelope: undefined;
            };
            setMissing: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {};
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
            };
            tlogVersionMismatch: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
            };
            tlogIncorrectSigInBody: {
                mediaType: string;
                verificationData: {
                    tlogEntries: {
                        logIndex: string;
                        logId: {
                            keyId: string;
                        };
                        kindVersion: {
                            kind: string;
                            version: string;
                        };
                        integratedTime: string;
                        inclusionPromise: {
                            signedEntryTimestamp: string;
                        };
                        canonicalizedBody: string;
                    }[];
                    timestampVerificationData: {
                        rfc3161Timestamps: never[];
                    };
                };
                verificationMaterial: {
                    x509CertificateChain: {
                        certificates: {
                            rawBytes: string;
                        }[];
                    };
                };
                messageSignature: {
                    messageDigest: {
                        algorithm: string;
                        digest: string;
                    };
                    signature: string;
                };
            };
        };
    };
};
export default _default;
export declare const tlogKeys: {
    [x: string]: crypto.KeyObject;
};
